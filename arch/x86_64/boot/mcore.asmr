org 0x1000
[BITS 16]

; We're gonna overwrite this with 0xAA to 
; signal a successful start
nop

cli ; Just incase
cld

xor ax, ax
mov ds, ax

jmp 0x00:fix

fix:
    mov ss, ax
    mov es, ax
    mov fs, ax
    mov gs, ax

    ; Let this just fall through

; Enable PAE
mov eax, cr4
or  eax, 1 << 5
mov cr4, eax

; Time to touch the EFER
mov ecx, 0xC0000080
rdmsr
or eax, 1 << 8  ; Long mode
or eax, 1 << 0  ; Syscall
wrmsr

; Set cr3 to what the BSP gave us
mov dword eax, [0x500]
mov cr3, eax

; Actually enabling paging and protected mode
mov eax, cr0
or  eax, (1 << 31) | 1 ; PE and PG
and eax, ~0x60000000   ; clear CD and NW
or  eax, (1 << 18)     ; And let's enable alignment checking while at it
mov cr0, eax

lgdt [tmp_gdt.ptr]
jmp tmp_gdt.code:lmode

[BITS 64]
lmode:
    mov rax, tmp_gdt.data

    mov ds, rax
    mov ss, rax
    mov es, rax

	xor rax, rax
	mov gs, rax

	; Let's setup SSE
    mov rax, cr0
    and rax, ~(1 << 2)
    or  rax, (1 << 1)
    mov rax, cr0

    mov rax, cr4
    or  rax, (0b01 << 7)
    or  rax, (0b11 << 9)
    mov cr4, rax

	; Let's fake the CPU structure
	mov rcx, 0xC0000101

	mov rax, fake_cpu_class_ptr
	mov rdx, rax
	ror rdx, 32

	wrmsr

	; Let's load the BSP's GDT and IDT
	lidt [0x510]
	lgdt [0x520]

	; Time to get the rest of the parameters
	mov qword rsp, [0x540]
	mov qword rdi, [0x550]

	mov qword rax, [0x530]
	call rax

    mov byte [0x1000], 0xAA

	mov qword rax, [0x560]
	call rax

fake_cpu_class_ptr:
	dq fake_cpu_class

fake_cpu_class:
	dd 0
	dd 0

	dq fake_cpu_class

	dq 0
	dq 0
	dq 0
	dq 0
	dq 0
	dq 0
	dq 0
	dq 0

align 16
tmp_gdt:
	.null: equ $ - tmp_gdt
	dw 0xFFFF     ; Limit
	dw 0x00       ; Base (low)
	db 0x00       ; Base (middle)
	db 0x00       ; Access
	db 0x01       ; Granularity
	db 0x00       ; Base (high)
	.code: equ $ - tmp_gdt
	dw 0xFFFF     ; Limit
	dw 0x00       ; Base (low)
	db 0x00       ; Base (middle)
	db 0b10011010 ; Access (exec/read)
	db 0b10101111 ; Granularity - 64 bits, limit 19:16
	db 0x00       ; Base (high)
	.data: equ $ - tmp_gdt
	dw 0xFFFF     ; Limit
	dw 0x00       ; Base (low)
	db 0x00       ; Base (middle)
	db 0b10010010 ; Access (read/write)
	db 0b00000000 ; Granularity
	db 0x00       ; Base (high)
	.ptr:
	dw $ - tmp_gdt - 1 ; Limit
	dd tmp_gdt         ; Base